# -*- coding: utf-8 -*-
"""Entry to deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkqyTlCXikr7KRNqeqj7cl30U8tV_xdB
"""

import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data

sess = tf.InteractiveSession()
mnist = input_data.read_data_sets("MNIST_data/",one_hot=True)

#%matplotlib inline
import matplotlib.pyplot as plt

def display_sample(num):
  print(mnist.train.labels[num])
  label = mnist.train.labels[num].argmax()
  image = mnist.train.images[num].reshape([28,28])
  plt.title('Sample: %d Label: %d' %(num, label))
  plt.imshow(image,cmap=plt.get_cmap('gray_r'))
  plt.show()

display_sample(1235)

import numpy as np

images = mnist.train.images[0].reshape([1,784])
for i in range(1,500):
  images = np.concatenate((images,mnist.train.images[i].reshape([1,784])))
plt.imshow(images,cmap=plt.get_cmap('gray_r'))
plt.show()

input_images = tf.placeholder(tf.float32, shape=[None, 784])
target_labels = tf.placeholder(tf.float32, shape=[None, 10])

hidden_nodes = 784
hidden_nodes1 = 800
input_weights = tf.Variable(tf.truncated_normal([784,hidden_nodes])) 
input_biases = tf.Variable(tf.zeros([hidden_nodes]))
hidden_weights = tf.Variable(tf.truncated_normal([hidden_nodes,hidden_nodes1]))
hidden_biases = tf.Variable(tf.zeros([hidden_nodes1]))
hidden_weights1 = tf.Variable(tf.truncated_normal([hidden_nodes1,10]))
hidden_biases1 = tf.Variable(tf.zeros([10]))

input_layer = tf.matmul(input_images,input_weights)
hidden_layer = tf.nn.relu(input_layer +input_biases)
hidden_layer1 = tf.matmul(hidden_layer,hidden_weights)
ahidden_layer1 = tf.nn.relu(hidden_layer1 + hidden_biases)
digit_weights = tf.matmul(ahidden_layer1, hidden_weights1)+hidden_biases1

loss_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=digit_weights,labels=target_labels))

optimizer = tf.train.AdamOptimizer(learning_rate=0.01,epsilon=1e-08).minimize(loss_function)

correct_prediction = tf.equal(tf.argmax(digit_weights,1),tf.argmax(target_labels,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))

tf.global_variables_initializer().run()

for x in range(5000):
  batch = mnist.train.next_batch(100)
  optimizer.run(feed_dict={input_images: batch[0],target_labels: batch[1]})
  if((x+1)%100 == 0):
    print("Training epoch "+str(x+1))
    print("Accuracy: "+str(accuracy.eval(feed_dict={input_images: mnist.test.images,target_labels: mnist.test.labels})))

for x in range(1000):
    # Load a single test image and its label
    x_train = mnist.test.images[x,:].reshape(1,784)
    y_train = mnist.test.labels[x,:]
    # Convert the one-hot label to an integer
    label = y_train.argmax()
    # Get the classification from our neural network's digit_weights final layer, and convert it to an integer
    prediction = sess.run(digit_weights, feed_dict={input_images: x_train}).argmax()
    # If the prediction does not match the correct label, display it
    if (prediction != label) :
        plt.title('Prediction: %d Label: %d' % (prediction, label))
        plt.imshow(x_train.reshape([28,28]), cmap=plt.get_cmap('gray_r'))
        plt.show()

